#!/usr/bin/env groovy
// NOTE - Deprecated in favor of ./bin/deploy-rules.sh
openshift.withCluster() {
    env.NAMESPACE = openshift.project()
    env.APPLICATION_NAME = "data-compression"
    env.APPLICATION_RELEASE = "0.0.1"
    echo "Starting Pipeline for ${env.APPLICATION_NAME}..."
}

pipeline {
    // Jenkins will dynamically provision this as OpenShift Pod
    // All the stages and steps of this Pipeline will be executed on this Pod
    // After Pipeline completes the Pod is killed so every run will have clean
    // workspace
    agent {
        label 'maven'
    }
    stages {
        // Run Maven build, skipping tests
        stage('Build & Test Application') {
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh "mvn clean install"
                }
            }
        }

        // apply ansible config
        stage('Apply OpenShift Manifests') {
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh """
                        oc process -f templates/kie-server.yml \
                            -p APPLICATION_NAME=${APPLICATION_NAME} \
                            -p APPLICATION_RELEASE=${APPLICATION_RELEASE} \
                            -p KIE_SERVER_CONTAINER_DEPLOYMENT="datacompression=com.redhat.iot:data-compression:${APPLICATION_RELEASE}-SNAPSHOT" \
                            -p SOURCE_REPOSITORY_URL=${SOURCE_REPOSITORY_URL} \
                            -p SOURCE_REPOSITORY_REF=${SOURCE_REPOSITORY_REF} \
                            -p SOURCE_SECRET=${SOURCE_SECRET} \
                            -p CONTEXT_DIR=${APPLICATION_CONTEXT_DIR} \
                            -p KIE_SERVER_HTTPS_SECRET=${APPLICATION_NAME}-https-secret \
                            | oc apply -f-
                    """
                    script {
                        openshift.withCluster() {
                            openshift.selector('deployment', "${env.APPLICATION_NAME}-kieserver").rollout().pause()
                        }
                    }
                }
            }
        }

        // Build Container Image using the artifacts produced in previous stages
        stage('Build Container Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(NAMESPACE) {
                            openshift.selector("bc", "${env.APPLICATION_NAME}-kieserver").startBuild().logs("-f")
                        }
                    }
                }
            }
        }

        stage('Deploy to OCP') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.tag("${env.NAMESPACE}/${env.APPLICATION_NAME}-kieserver:latest", "${env.NAMESPACE}/${env.APPLICATION_NAME}-kieserver:${APPLICATION_RELEASE}")
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(NAMESPACE) {
                            timeout(time: 5, unit: 'MINUTES') {
                                def deployment = openshift.selector('dc', "${env.APPLICATION_NAME}-kieserver")
                                patch = deployment.object()
                                patch.spec.replicas = 1
                                openshift.apply(patch)
                                deployment.rollout().resume()
                                deployment.rollout().status()
                            }
                        }
                    }
                }
            }
        }
    }
}